{"version":3,"sources":["index.js"],"names":["Box","selectBox","props","row","col","className","this","boxClass","id","onClick","React","Component","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","key","style","Buttons","handleSelect","e","gridSize","playButton","pauseButton","clear","slow","fast","seed","title","onSelect","Item","eventKey","Main","gridCopy","arrayClone","state","setState","Math","floor","random","clearInterval","intervalId","setInterval","play","speed","console","log","grid","Array","fill","map","generation","size","grid2","nbNeighbour","arr","JSON","parse","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.059b10e0.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ButtonToolbar, Dropdown, DropdownButton } from 'react-bootstrap' ; \n\nclass Box extends React.Component {\n    selectBox = () =>{\n        this.props.selectBox(this.props.row , this.props.col)\n    }\n    render() {\n        return(\n            <div \n            className = {this.props.boxClass} \n            id = {this.props.id}\n            onClick = {this.selectBox} \n            />\n\n        );\n    }\n}\n\nclass Grid extends React.Component {\n    render() {\n        const width = (this.props.cols * 14 + 1) ; \n        var rowsArr = [] ; \n        \n        var boxClass = \"\" ; \n        for (var i=0 ; i < this.props.rows ; i++ ) {\n            for (var j=0 ; j < this.props.cols ; j++ ) {\n                let boxId = i + \"_\" + j ; \n                boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\"  ;\n                rowsArr.push(\n                    <Box \n                    boxClass={boxClass}\n                    key = {boxId}\n                    boxId = {boxId}\n                    row = {i} \n                    col = {j}\n                    selectBox = {this.props.selectBox}\n                    />\n                );\n            }\n        }\n        \n        return(\n            <div className=\"grid\" style={{width: width}}>\n            {rowsArr}\n            </div>\n            )\n        }\n    }\n\n    class Buttons extends React.Component {\n        handleSelect = (e) => {\n            this.props.gridSize(e) ; \n        }\n\n        render() {\n            return(\n                <div className=\"center\">\n                    <ButtonToolbar>\n                        <button className=\"btn btn-default\" onClick={this.props.playButton}>Play</button>\n                        <button className=\"btn btn-default\" onClick={this.props.pauseButton}>Stop</button>\n                        <button className=\"btn btn-default\" onClick={this.props.clear}>Clear</button>\n                        <button className=\"btn btn-default\" onClick={this.props.slow}>Slower</button>\n                        <button className=\"btn btn-default\" onClick={this.props.fast}>Faster</button>\n                        <button className=\"btn btn-default\" onClick={this.props.seed}>New</button>\n                        <DropdownButton \n                        title = \"Grid Size\"\n                        id = \"size-menu\" \n                        onSelect = {this.handleSelect}\n                        >\n                        <Dropdown.Item eventKey=\"1\">20x10</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"2\">50x30</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"3\">70x50</Dropdown.Item>\n                        </DropdownButton>\n                    </ButtonToolbar>\n                </div>\n            )\n        }\n    }\n    \n    class Main extends React.Component {\n        constructor() {\n            super();\n            this.speed = 100 ; \n            this.rows = 30 ; \n            this.cols = 50 ; \n            \n            this.state = {\n                generation: 0,\n                gridFull: Array(this.rows).fill().map( () => Array(this.cols).fill(false)) \n            }\n        }\n\n        selectBox = (row , col) => {\n            let gridCopy = arrayClone(this.state.gridFull) ; \n            gridCopy[row][col] = !gridCopy[row][col] ; \n            this.setState( {\n                gridFull: gridCopy\n            });\n        }\n\n        seed = () => {\n            let gridCopy = arrayClone(this.state.gridFull) ; \n            for (let i = 0; i < this.rows; i++) {\n                for (let j = 0; j < this.cols; j++) {\n                    if (Math.floor(Math.random() *4) === 1) gridCopy[i][j] = true;\n                }\n            }\n            this.setState( {\n                gridFull: gridCopy\n            });\n        }\n\n        playButton = () => {\n            clearInterval(this.intervalId) ; \n            this.intervalId = setInterval(this.play, this.speed) ;\n        }\n        pauseButton = () => {\n            clearInterval(this.intervalId) ; \n        }\n        slow = () => {\n            this.speed = this.speed *1.3 ; \n            console.log(\"Vitesse actuelle : \"+this.speed) ; \n            this.playButton() ;\n        }\n        fast = () => {\n            this.speed = this.speed / 1.3 ; \n            console.log(\"Vitesse actuelle : \" + this.speed) ; \n            this.playButton() ; \n        }\n        clear = () => {\n            var grid = Array(this.rows).fill().map( () => Array(this.cols).fill(false)) ; \n            this.setState({\n                gridFull: grid,\n                generation: 0\n            });\n        }\n        gridSize = (size) => {\n            switch (size) {\n                case \"1\":\n                    this.cols = 20 ;\n                    this.rows = 10 ;\n                    break;\n                case \"2\":\n                    this.cols = 50 ;\n                    this.rows = 30 ;\n                    break;            \n                default:\n                        this.cols = 70 ;\n                        this.rows = 50 ;\n                        break;\n            }\n            this.clear() ; \n        }\n        play = () => {\n            let grid = this.state.gridFull ; \n            let grid2 = arrayClone(this.state.gridFull) ; \n\n            // Game of Life ruleS\n            for (let i = 0; i < this.rows; i++) {\n                for (let j = 0; j < this.cols; j++) {\n                  let nbNeighbour = 0;\n                  if (i > 0) if (grid[i - 1][j]) nbNeighbour++;\n                  if (i > 0 && j > 0) if (grid[i - 1][j - 1]) nbNeighbour++;\n                  if (i > 0 && j < this.cols - 1) if (grid[i - 1][j + 1]) nbNeighbour++;\n                  if (j < this.cols - 1) if (grid[i][j + 1]) nbNeighbour++;\n                  if (j > 0) if (grid[i][j - 1]) nbNeighbour++;\n                  if (i < this.rows - 1) if (grid[i + 1][j]) nbNeighbour++;\n                  if (i < this.rows - 1 && j > 0) if (grid[i + 1][j - 1]) nbNeighbour++;\n                  if (i < this.rows - 1 && j < this.cols - 1) if (grid[i + 1][j + 1]) nbNeighbour++;\n                  if (grid[i][j] && (nbNeighbour < 2 || nbNeighbour > 3)) grid2[i][j] = false;\n                  if (!grid[i][j] && nbNeighbour === 3) grid2[i][j] = true;\n                }\n              }\n              this.setState({\n                   gridFull: grid2,\n                   generation: this.state.generation+1\n              });\n        }\n\n        componentDidMount() {\n            this.seed() ; \n            this.playButton() ; \n        }\n        \n        render() {\n            return(\n                <div>\n                <h1>The Game Of Life</h1>\n                <Buttons \n                playButton = {this.playButton}\n                pauseButton = {this.pauseButton}\n                slow = {this.slow}\n                fast = {this.fast}\n                clear = {this.clear}\n                seed = {this.seed}\n                gridSize = {this.gridSize}\n                />\n                <Grid \n                gridFull = {this.state.gridFull}\n                rows = {this.rows} \n                cols = {this.cols} \n                selectBox = {this.selectBox}\n                />\n                <h2> Generations : {this.state.generation} </h2>\n                </div>\n                );\n            }\n        }\n        \n        function arrayClone(arr) { \n            return JSON.parse(JSON.stringify(arr)) ; \n        }\n\n        ReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}